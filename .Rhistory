for(peer in 1:sites.per.trace) {
p.i <- p.i + 1
for(user in 1:users.per.site) {
gc()
cl.i <- cl.i + 1
u.i <- u.i + 1
df2 <- subset(df, Trace == trace)
iat.dist <- subset(df2, stats.attr=="bot_user_iat" & Cluster==iat.clusters[cl.i])
d <- as.character(iat.dist$distribution)
t <- 0
iat <- vector()
st <- vector()
while (t < duration.secs) {
if (d != "exponential")
iat <- c(iat, transform.f(dists.rfun[[d]](buffer, iat.dist$Param1, iat.dist$Param2)))
else
iat <- c(iat, transform.f(dists.rfun[[d]](buffer, iat.dist$Param1)))
st <- cumsum(iat)
t <- st[length(st)]
}
njobs <- length(st)
rtsum.dist <- subset(df2, stats.attr=="bot_runtime_sum" & Cluster==rtsum.clusters[cl.i])
d <- as.character(rtsum.dist$distribution)
rtsum <- vector()
jobs.len <- 0
while (jobs.len < njobs) {
if (d != "exponential")
rtsum <- c(rtsum, transform.f(dists.rfun[[d]](buffer, rtsum.dist$Param1,
rtsum.dist$Param2)))
else
rtsum <- c(rtsum, transform.f(dists.rfun[[d]](buffer, rtsum.dist$Param1)))
rtsum <- rtsum[rtsum <= rt.max]
jobs.len <- length(rtsum)
}
length(rtsum) <- njobs
ntasks <- vector()
rttask.dist <- subset(df2, stats.attr=="task_runtime" & Cluster==trt.clusters[cl.i])
d <- as.character(rttask.dist$distribution)
all_rt_tasks <- foreach(bot_runtime=rtsum, .combine=c) %do% {
agg_runtime <- 0
job_size <- 0
rt_tasks <- vector(mode="numeric")
task.i <- 1
loop <- TRUE
while(loop) {
if (d != "exponential")
rt_tasks <- c(rt_tasks, transform.f(dists.rfun[[d]](buffer, rttask.dist$Param1,
rttask.dist$Param2)))
else
rt_tasks <- c(rt_tasks, transform.f(dists.rfun[[d]](buffer, rttask.dist$Param1)))
rt.sum <- cumsum(rt_tasks[(job_size+1):length(rt_tasks)]) + agg_runtime
task.i <- max(0, min(which(rt.sum >= bot_runtime))-1)
if (!is.infinite(task.i)) {
length(rt_tasks) <- job_size + task.i + 1
rt_tasks[length(rt_tasks)] <- ifelse(task.i > 0, bot_runtime-rt.sum[task.i],
bot_runtime-agg_runtime)
agg_runtime <- bot_runtime
loop <- FALSE
} else {
agg_runtime <- rt.sum[length(rt.sum)]
}
job_size <- length(rt_tasks)
}
ntasks <- c(ntasks,job_size)
return(rt_tasks)
}
uid <- paste("U",u.i,sep="")
pid <- paste("P",p.i,sep="")
iat.cid <- paste("C",iat.clusters[cl.i],sep="")
rtsum.cid <- paste("C",rtsum.clusters[cl.i],sep="")
rttask.cid <- paste("C", trt.clusters[cl.i],sep="")
if (reduced.wl) {
wl <- subset(data.frame(SubmitTime=round(st), RunTime.sum=round(rtsum),
JobID=1:length(ntasks), BoTSize=ntasks, UserID=uid, PeerID=pid,
TraceID=trace, Cluster.IAT=iat.cid, Cluster.JRT=rtsum.cid,
Cluster.TRT=rttask.cid), SubmitTime <= duration.secs)
} else {
wl <- subset(data.frame(SubmitTime=rep(round(st),ntasks), RunTime=round(all_rt_tasks),
JobID=rep(1:length(ntasks),ntasks), UserID=uid, PeerID=pid,
TraceID=trace, Cluster.IAT=iat.cid, Cluster.JRT=rtsum.cid,
Cluster.TRT=rttask.cid), SubmitTime <= duration.secs)
}
write.table(wl, paste('workload_clust_', sites.per.trace, 'spt_', users.per.site, "ups_",
trace,'.txt',sep=""), col.names=is.first, append=!is.first,
quote=FALSE, row.names=FALSE)
is.first <- FALSE
}
}
}
}
GenerateWorkload()
##
# List of traces that will be used in extraction of workload models. The traces must contain
# the Bag-of-Task (BoT) ID in the field JobStructureParams. One can generate this information
# by running the function "GenerateBoTInfoFromGWA(...)" before starting the extraction process.
# Each trace is represented by the tuple: c(Trace ID, GWA-format trace file).
##
kTraces <- list(c("gwa-t1", "/local/marcus/workloads/gwa-t1/anon_jobs.gwf_jid.txt"),
c("gwa-t2", "/local/marcus/workloads/gwa-t2/grid5000_clean_trace.log_jid.txt"),
c("gwa-t3", "/local/marcus/workloads/gwa-t3/anon_jobs.gwf_jid.txt"),
c("gwa-t4", "/local/marcus/workloads/gwa-t4/anon_jobs.gwf_jid.txt"),
c("gwa-t10", "/local/marcus/workloads/gwa-t10/anon_jobs.gwf_jid.txt"),
c("gwa-t11", "/local/marcus/workloads/gwa-t11/anon_jobs.gwf_jid.txt"))
## Entrada de dados
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga = read_csv(here::here(params$arquivo_dados), col_types = "dddcdccdd")
glimpse(dados_carga)
View(dados_carga)
View(params)
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga = read_tsv(here::here(params$arquivo_dados), col_types = "dddcdccdd")
glimpse(dados_carga)
View(dados_carga)
View(params)
View(dados_carga)
dados_carga = read_tsv(here::here(params$arquivo_dados))
#                     col_types = "dddcdccdd")
glimpse(dados_carga)
dados_carga <- read_tsv(here::here(params$arquivo_dados), col_types =
cols(
Param1 = col_double(),
Param2 = col_double(),
Cluster = col_integer(),
distribution = col_character(),
k  = col_integer(),
Trace = col_character() ,
stats.attr = col_character(),
Size  = col_integer(),
Fraction = col_double()
)
)
glimpse(dados_carga)
View(dados_carga)
dados_carga <- read_table(here::here(params$arquivo_dados), col_types =
cols(
Param1 = col_double(),
Param2 = col_double(),
Cluster = col_integer(),
distribution = col_character(),
k  = col_integer(),
Trace = col_character() ,
stats.attr = col_character(),
Size  = col_integer(),
Fraction = col_double()
)
)
glimpse(dados_carga)
View(dados_carga)
View(params)
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga <- read_table(here::here(params$arquivo_dados), col_types =
cols(
Param1 = col_double(),
Param2 = col_double(),
Cluster = col_integer(),
distribution = col_character(),
k  = col_integer(),
Trace = col_character() ,
stats.attr = col_character(),
Size  = col_integer(),
Fraction = col_double()
)
)
glimpse(dados_carga)
dados_carga <- read_table(here::here(params$arquivo_dados))
#                          , col_types =
#                      cols(
#                            Param1 = col_double(),
#                            Param2 = col_double(),
#                            Cluster = col_integer(),
#                            distribution = col_character(),
#                            k  = col_integer(),
#                            Trace = col_character() ,
#                            stats.attr = col_character(),
#                            Size  = col_integer(),
#                            Fraction = col_double()
#                      )
#                    )
glimpse(dados_carga)
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga <- read_table(here::here(params$arquivo_dados))
#                          , col_types =
#                      cols(
#                            Param1 = col_double(),
#                            Param2 = col_double(),
#                            Cluster = col_integer(),
#                            distribution = col_character(),
#                            k  = col_integer(),
#                            Trace = col_character() ,
#                            stats.attr = col_character(),
#                            Size  = col_integer(),
#                            Fraction = col_double()
#                      )
#                    )
glimpse(dados_carga)
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga <- read_table(here::here(params$arquivo_dados),
cols(
`Param1 Param2 Cluster distribution k Trace stats.attr Size Fraction` = col_character()
)
)
View(params)
dados_carga <- read_table(here::here(params$arquivo_dados),
cols(`Param1 Param2 Cluster distribution k Trace stats.attr Size Fraction` = col_character())
)
dados_carga <- read_table(here::here(params$arquivo_dados),
cols("Param1 Param2 Cluster distribution k Trace stats.attr Size Fraction" = col_character())
)
dados_carga <- read_table(here::here(params$arquivo_dados), col_names =
cols("Param1 Param2 Cluster distribution k Trace stats.attr Size Fraction" = col_character())
)
dados_carga <- read_table(here::here(params$arquivo_dados), col_names =
cols(`Param1 Param2 Cluster distribution k Trace stats.attr Size Fraction` = col_character())
)
dados_carga <- read_table(here::here(params$arquivo_dados)
#                          , col_types =
#                      cols(
#                            Param1 = col_double(),
#                            Param2 = col_double(),
#                            Cluster = col_integer(),
#                            distribution = col_character(),
#                            k  = col_integer(),
#                            Trace = col_character() ,
#                            stats.attr = col_character(),
#                            Size  = col_integer(),
#                            Fraction = col_double()
#                      )
#                    )
glimpse(dados_carga)
dados_carga <- read_table(here::here(params$arquivo_dados))
#                          , col_types =
#                      cols(
#                            Param1 = col_double(),
#                            Param2 = col_double(),
#                            Cluster = col_integer(),
#                            distribution = col_character(),
#                            k  = col_integer(),
#                            Trace = col_character() ,
#                            stats.attr = col_character(),
#                            Size  = col_integer(),
#                            Fraction = col_double()
#                      )
#                    )
glimpse(dados_carga)
dados_carga <- read_table(here::here(params$arquivo_dados), col_names = TRUE)
#                          , col_types =
#                      cols(
#                            Param1 = col_double(),
#                            Param2 = col_double(),
#                            Cluster = col_integer(),
#                            distribution = col_character(),
#                            k  = col_integer(),
#                            Trace = col_character() ,
#                            stats.attr = col_character(),
#                            Size  = col_integer(),
#                            Fraction = col_double()
#                      )
#                    )
glimpse(dados_carga)
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga <- read_table(here::here(params$arquivo_dados), col_names = TRUE)
#                          , col_types =
#                      cols(
#                            Param1 = col_double(),
#                            Param2 = col_double(),
#                            Cluster = col_integer(),
#                            distribution = col_character(),
#                            k  = col_integer(),
#                            Trace = col_character() ,
#                            stats.attr = col_character(),
#                            Size  = col_integer(),
#                            Fraction = col_double()
#                      )
#                    )
glimpse(dados_carga)
View(dados_carga)
View(dados_carga)
dados_carga <- read_table2(here::here(params$arquivo_dados), col_names = TRUE)
#                          , col_types =
#                      cols(
#                            Param1 = col_double(),
#                            Param2 = col_double(),
#                            Cluster = col_integer(),
#                            distribution = col_character(),
#                            k  = col_integer(),
#                            Trace = col_character() ,
#                            stats.attr = col_character(),
#                            Size  = col_integer(),
#                            Fraction = col_double()
#                      )
#                    )
glimpse(dados_carga)
dados_carga <- read_table2(here::here(params$arquivo_dados), col_names = TRUE)
glimpse(dados_carga)
dados_carga %>%
ggplot(aes(x = k, fill = Trace, color = distribution))
dados_carga %>%
ggplot(aes(x = k, fill = Trace, color = distribution))
+ geom_point()
dados_carga %>%
ggplot(aes(x = k, fill = Trace, color = distribution))
+ geom_point(alpha = 0.3)
dados_carga %>%
ggplot(aes(x = k, fill = Trace, color = distribution))
+ geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, fill = Trace, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Trace, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Param1, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Param2, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Param1, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = 2^Param1, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Param1, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = 2^Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
# NOT RUN {
##-- Simple didactical  ecdf  example :
x <- rnorm(12)
Fn <- ecdf(x)
Fn     # a *function*
Fn(x)  # returns the percentiles for x
tt <- seq(-2, 2, by = 0.1)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
summary(Fn)
##--> see below for graphics
knots(Fn)  # the unique data values {12 of them if there were no ties}
y <- round(rnorm(12), 1); y[3] <- y[1]
Fn12 <- ecdf(y)
Fn12
knots(Fn12) # unique values (always less than 12!)
summary(Fn12)
summary.stepfun(Fn12)
## Advanced: What's inside the function closure?
ls(environment(Fn12))
##[1] "f"  "method"  "n"  "x"  "y"  "yleft"  "yright"
utils::ls.str(environment(Fn12))
stopifnot(all.equal(quantile(Fn12), quantile(y)))
###----------------- Plotting --------------------------
require(graphics)
op <- par(mfrow = c(3, 1), mgp = c(1.5, 0.8, 0), mar =  .1+c(3,3,2,1))
F10 <- ecdf(rnorm(10))
summary(F10)
plot(F10)
plot(F10, verticals = TRUE, do.points = FALSE)
plot(Fn12 , lwd = 2) ; mtext("lwd = 2", adj = 1)
xx <- unique(sort(c(seq(-3, 2, length = 201), knots(Fn12))))
lines(xx, Fn12(xx), col = "blue")
abline(v = knots(Fn12), lty = 2, col = "gray70")
plot(xx, Fn12(xx), type = "o", cex = .1)  #- plot.default {ugly}
plot(Fn12, col.hor = "red", add =  TRUE)  #- plot method
abline(v = knots(Fn12), lty = 2, col = "gray70")
## luxury plot
plot(Fn12, verticals = TRUE, col.points = "blue",
col.hor = "red", col.vert = "bisque")
##-- this works too (automatic call to  ecdf(.)):
plot.ecdf(rnorm(24))
title("via  simple  plot.ecdf(x)", adj = 1)
par(op)
# }
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_grid(Trace ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_grid(reorder(Trace) ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_grid(reorder(Trace, media) ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_grid(Trace ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_wrap(Trace ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
#  facet_wrap(Trace ~ ., scales = "free_y")
facet_grid(Trace ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_wrap(Trace ~ ., scales = "free_y")
#  facet_grid(Trace ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
+ facet_wrap(Trace ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6)
+ facet_wrap(Trace ~ ., scales = "free_y")
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_wrap(Trace ~ ., scales = "free_y")
#  facet_grid(Trace ~ ., scales = "free_y")
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga <- read_table2(here::here(params$arquivo_dados), col_names = TRUE)
glimpse(dados_carga)
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_wrap(Trace ~ ., scales = "free_y")
#  facet_grid(Trace ~ ., scales = "free_y")
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga <- read_table2(here::here(params$arquivo_dados), col_names = TRUE)
glimpse(dados_carga)
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_wrap(Trace ~ ., scales = "free_y")
#  facet_grid(Trace ~ ., scales = "free_y")
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
dados_carga <- read_table2(here::here(params$arquivo_dados), col_names = TRUE)
glimpse(dados_carga)
dados_carga %>%
ggplot(aes(x = k, y = Fraction, color = distribution)) +
geom_jitter(height = .1, alpha = .6) +
facet_wrap(Trace ~ ., scales = "free_y")
#  facet_grid(Trace ~ ., scales = "free_y")
