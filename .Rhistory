else
sx <- x
if (length(dist.params) == 1)
ks = ks.test(sx, dist.p, dist.params[1])
else
ks = ks.test(sx, dist.p, dist.params[1], dist.params[2])
data.frame(p.dist=ks$p.value, d.dist=ks$statistic)
}
return(data.frame(Distribution=dist.id, avg.pvalue=mean(res$p.dist)))
}
##
# Kolmogorov-Smirnov goodness-of-fit (GoF) test for two samples that checks how distant two
# empirical distributions are.
#
# Input:
# - x: first data values to be tested
# - y: second data values to be tested
# Output:
# - returns the result of the KS (statistic "D") test for the two sample data
##
KSTestTwoSample <- function(x, y) {
ks <- ks.test(x, y)
return(ks$statistic)
}
##
# Group workload trace by Bag-of-Tasks (BoT) providing BoT data.
#
# Input:
# - trace: data frame of the workload trace in the GWA format
# Output:
# - returns data frame containing BoT data
##
GroupByBoTs <- function(trace) {
if (max(as.integer(trace$JobStructureParams)) != -1) {
trace.job <- aggregate(trace$SubmitTime, list(trace$UserID, trace$JobStructureParams), min)
colnames(trace.job) <- c("UserID","JobStructureParams", "SubmitTime")
trace.job$FinishTime <- aggregate(trace$FinishTime,
list(trace$UserID, trace$JobStructureParams), max)$x
trace.job$RunTime <- aggregate(trace$RunTime,
list(trace$UserID, trace$JobStructureParams), mean)$x
trace.job$RunTime.SD <- aggregate(trace$RunTime,
list(trace$UserID, trace$JobStructureParams), sd)$x
trace.job$BoTSize <- with(trace, aggregate(JobStructureParams,
list(UserID, JobStructureParams), length))$x
trace <- trace.job
}
return(trace[order(trace$SubmitTime),])
}
##
# Group workload trace by users providing users' data.
#
# Input:
# - trace: data frame of the workload trace in the GWA format
# Output:
# returns data frame containing Users' data
##
GroupByUsersStats <- function(trace) {
trace <- subset(trace, RunTime > 0 & UserID != -1)
trace <- trace[order(trace$UserID, trace$SubmitTime),]
tt <- data.frame(SubmitTime.last=trace[1:(length(trace$SubmitTime)-1),]$SubmitTime,
SubmitTime.next=trace[2:length(trace$SubmitTime),]$SubmitTime,
UserID.next=trace[2:length(trace$SubmitTime),]$UserID,
FinishTime.last=trace[1:(length(trace$SubmitTime)-1),]$FinishTime,
UserID.last=trace[1:(length(trace$SubmitTime)-1),]$UserID,
RunTime.last=trace[1:(length(trace$RunTime)-1),]$RunTime)
tt$ThinkTime <- tt$SubmitTime.next - tt$FinishTime.last
tt$IAT <- tt$SubmitTime.next - tt$SubmitTime.last
tt <- subset(tt, UserID.next == UserID.last)
tt$UserID <- tt$UserID.last
tt$UserID.last <- NULL; tt$UserID.next <- NULL
return(tt)
}
##
# Load GWA trace file in as a data frame.
#
# Input:
# - trace.file: workload trace input file, as available in the GWA website
# - comment.char: character used to indicate a comment line in the file
# - sep: separator of fields in the file
# Output:
# - returns a data frame of the workload trace
##
ReadGWATrace <- function(trace.file, comment.char="&", sep="\t") {
trace <- read.table(trace.file,
col.names=c("JobID", "SubmitTime", "WaitTime", "RunTime", "NProcs", "AverageCPUTimeUsed",
"UsedMemory", "ReqNProcs", "ReqTime", "ReqMemory", "Status", "UserID", "GroupID",
"ExecutableID", "QueueID", "PartitionID", "OrigSiteID", "LastRunSiteID", "JobStructure",
"JobStructureParams", "UsedNetwork", "UsedLocalDiskSpace", "UsedResources", "ReqPlatform",
"ReqNetwork", "ReqLocalDiskSpace", "ReqResources", "VOID", "ProjectID"),
colClasses=c(NA, NA, NA, NA, "NULL", "NULL", "NULL", NA, NA, "NULL", NA, NA, "NULL", NA,
"NULL", "NULL", NA, NA, "NULL", NA, "NULL", "NULL", "NULL", "NULL", "NULL",
"NULL", "NULL", "NULL", "NULL"),
comment.char=comment.char, sep=sep)
trace$FinishTime <- trace$SubmitTime + trace$RunTime
trace$FinishTime <- with(trace, ifelse(WaitTime > 0, FinishTime+WaitTime, FinishTime))
return(trace[order(trace$SubmitTime),])
}
##
# Generates new workload file with information about the Bag-of-Tasks (BoT) job id in the
# "JobStructureParams" field.
#
# Input:
# - trace.file: workload trace file as available in the GWA website
# Output:
# - file containing the workload trace with added information about the BoT ID in the field
#   "JobStructureParams"
##
GenerateBoTInfoFromGWA <- function(trace.file) {
trace <- ReadGWATrace(trace.file)
trace <- subset(trace, RunTime > 0 & UserID != -1)
trace <- trace[order(trace$UserID, trace$SubmitTime),]
trace$JobStructureParams <- GroupBoTByLastTaskDeltaT(trace)
write.table(trace, file=paste(file, "jid.txt", sep="_"), sep="\t", col.names=FALSE,
row.names=FALSE, quote=FALSE)
}
##
# Group tasks in Bag-of-Tasks (BoT) jobs according to the approach proposed in:
# Iosup, A., Jan, M., Sonmez, O., and Epema, D.
# The characteristics and performance of groups of jobs in grids. In: Euro-Par, 2005.
#
# Input:
# - trace: data frame of GWA workload trace
# - deltat: time window to group tasks into BoT, as specified by Iosup et al.
# Output:
# - returns a vector of BoT IDs, one for each task in each row of "trace"
##
GroupBoTByLastTaskDeltaT <- function(trace, deltat) {
iat <- diff(trace$SubmitTime)
newbatch <- c(1,as.numeric(iat > deltat | iat < 0))
cumsum(newbatch)
}
##
# Apply filter to remove values that occur less than "threshold" times.
#
# Input:
# - df: data frame
# - attribute: attribute from the data frame to apply the filter
# - threshold: lower bound for the frequency of attribute values in the data frame
# Output:
# - returns the vector of attribute values that occurs more or equal than "threshold" times
##
FilterByFrequency <- function(df, attribute, threshold=100) {
freq <- table(df[attribute])
return(names(freq[freq >= threshold]))
}
##
# Calculate the proportion of data values that are higher than the threshold.
#
# Input:
# - x: data values
# - threshold: lower bound to calculate the proportion
# Output:
# - returns the proportion of data values in "x" that are higher than the "threshold"
##
HigherThanValueProportion <- function(x, threshold=0.05) {
length(x[x>threshold])/length(x)
}
require(foreach)
require(doMC)
registerDoMC()
---
title: "Análise da replicação de Carvalho et al. 2012"
output:
html_document:
df_print: paged
code_folding: hide
theme: sandstone
params:
arquivo_dados: "data/wl_fitdist_best.txt"
modelo_carga: "results/wl_fitdist_all.txt"
---
```{r echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 6,
fig.height = 5)
```
---
title: "Análise da replicação de Carvalho et al. 2012"
output:
html_document:
df_print: paged
code_folding: hide
theme: sandstone
params:
arquivo_dados: "data/wl_fitdist_best.txt"
arquivo_modelo_carga: "results/wl_fitdist_all.txt"
---
dados_modelo_carga <- read_table2(here::here(params$arquivo_modelo_carga), col_names = TRUE)
dados_modelo_carga <- read_table2(here::here(params$arquivo_modelo_carga), col_names = TRUE)
glimpse(dados_modelo_carga)
dados_modelo_carga <- read_table2(here::here(params$arquivo_modelo_carga), col_names = TRUE)
glimpse(dados_modelo_carga)
dados_carga_dist %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(stats.attr ~ Trace) +
geom_line()
dados_modelo_carga %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(stats.attr ~ Trace) +
geom_line()
View(dados_modelo_carga)
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 7,
fig.height = 5)
dados_modelo_carga %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(stats.attr ~ Trace) +
geom_line()
dados_modelo_carga_labels = dados_modelo_carga
dados_modelo_carga_labels = dados_modelo_carga
levels(dados_modelo_carga_labels$Trace)[levels(dados_modelo_carga_labels$Trace)=="gwa-t1"] <- "GS1"
glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels = dados_modelo_carga
levels(dados_modelo_carga_labels$Trace)[levels(dados_modelo_carga_labels$Trace)=="gwa-t1"] <- "GS1"
glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels = dados_modelo_carga
levels(dados_modelo_carga_labels$Trace)[levels(dados_modelo_carga_labels$Trace)=="gwa-t1"] <- "GS1"
glimpse(dados_modelo_carga_labels)
View(dados_modelo_carga_labels)
dados_modelo_carga_labels = dados_modelo_carga
levels(dados_modelo_carga_labels$Trace)
levels(dados_modelo_carga_labels$Trace)[levels(dados_modelo_carga_labels$Trace)=="gwa-t1"] <- "GS1"
glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels = dados_modelo_carga
class(dados_modelo_carga_labels$Trace)
levels(dados_modelo_carga_labels$Trace)[levels(dados_modelo_carga_labels$Trace)=="gwa-t1"] <- "GS1"
glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels = dados_modelo_carga
levels(dados_modelo_carga_labels$Trace)
#levels(dados_modelo_carga_labels$Trace)[levels(dados_modelo_carga_labels$Trace)=="gwa-t1"] <- "GS1"
#glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels = dados_modelo_carga
dados_modelo_carga_labels[dados_modelo_carga_labels$Trace=="gwa-t1"]
dados_modelo_carga_labels[Trace=="gwa-t1"]
dados_modelo_carga_labels$Trace_label <- recode(dados_modelo_carga_labels$Trace, '"gwa-t1" = "GS1"', as.factor=TRUE)
dados_modelo_carga_labels$Trace_label <- recode(dados_modelo_carga_labels$Trace, 'gwa-t1 = "GS1"', as.factor=TRUE)
rlang::last_error()
dados_modelo_carga_labels$Trace_label <- switch(dados_modelo_carga_labels$Trace, 'gwa-t1 = "GS1"', as.factor=TRUE)
dados_modelo_carga_labels$Trace_label <- switch(dados_modelo_carga_labels$Trace, '"gwa-t1" = "GS1"', as.factor=TRUE)
rlang::last_error()
dados_modelo_carga_labels <- within(dados_modelo_carga_labels, {
Trace_label <- recode(Trace, '"gwa-t1" = "GS1"', as.factor=TRUE)
})
dados_modelo_carga_labels <- within(dados_modelo_carga_labels, {
Trace_label <- recode(Trace, '"gwa-t1" = "GS1"')
})
dados_modelo_carga_labels <- dados_modelo_carga_labels %>>%
mutate(Trace_label = case_when(
Trace == "gwa-t1" ~ "GS1",
Trace == "gwa-t2" ~ "GS2",
)
)
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate(Trace_label = case_when(
Trace == "gwa-t1" ~ "GS1",
Trace == "gwa-t2" ~ "GS2",
)
)
View(dados_modelo_carga_labels)
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate(Trace_label = case_when(
Trace == "gwa-t1" ~ "GS1",
Trace == "gwa-t2" ~ "GS2",
Trace == "gwa-t3" ~ "GS3",
Trace == "gwa-t4" ~ "GS4",
Trace == "gwa-t10" ~ "GS5",
Trace == "gwa-t11" ~ "GS6",
)
)
View(dados_modelo_carga_labels)
dados_modelo_carga_labels = dados_modelo_carga
glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate(Trace_label = case_when(
Trace == "gwa-t1" ~ "GS1",
Trace == "gwa-t2" ~ "GS2",
Trace == "gwa-t3" ~ "GS3",
Trace == "gwa-t4" ~ "GS4",
Trace == "gwa-t10" ~ "GS5",
Trace == "gwa-t11" ~ "GS6",
)
)
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate( atributos_carga = case_when(
stats.attr == "bot_user_iat" ~ "JIST",
stats.attr == "bot_runtime_sum" ~ "JET",
stats.attr == "task_runtime" ~ "TET"
)
)
View(dados_modelo_carga_labels)
dados_modelo_carga %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(stats.attr ~ Trace) +
geom_line()
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line()
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 7,
fig.height = 5)
dados_modelo_carga <- read_table2(here::here(params$arquivo_modelo_carga), col_names = TRUE)
glimpse(dados_modelo_carga)
dados_modelo_carga %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(stats.attr ~ Trace) +
geom_line()
dados_modelo_carga_labels = dados_modelo_carga
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate(Trace_label = case_when(
Trace == "gwa-t1" ~ "GS1",
Trace == "gwa-t2" ~ "GS2",
Trace == "gwa-t3" ~ "GS3",
Trace == "gwa-t4" ~ "GS4",
Trace == "gwa-t10" ~ "GS5",
Trace == "gwa-t11" ~ "GS6",
)
)
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate( atributos_carga = case_when(
stats.attr == "bot_user_iat" ~ "JIST",
stats.attr == "bot_runtime_sum" ~ "JET",
stats.attr == "task_runtime" ~ "TET"
)
)
glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line()
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
ylab("Group Goodeness-of-Fit (GGoF)")
library(tidyverse)
library(broom)
library(ggbeeswarm)
library(gridExtra)
theme_set(theme_bw())
knitr::opts_chunk$set(tidy = FALSE,
fig.width = 7,
fig.height = 5)
dados_modelo_carga <- read_table2(here::here(params$arquivo_modelo_carga), col_names = TRUE)
glimpse(dados_modelo_carga)
dados_modelo_carga %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(stats.attr ~ Trace) +
geom_line()
dados_modelo_carga_labels = dados_modelo_carga
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate(Trace_label = case_when(
Trace == "gwa-t1" ~ "GS1",
Trace == "gwa-t2" ~ "GS2",
Trace == "gwa-t3" ~ "GS3",
Trace == "gwa-t4" ~ "GS4",
Trace == "gwa-t10" ~ "GS5",
Trace == "gwa-t11" ~ "GS6",
)
)
dados_modelo_carga_labels <- dados_modelo_carga_labels %>%
mutate( atributos_carga = case_when(
stats.attr == "bot_user_iat" ~ "JIST",
stats.attr == "bot_runtime_sum" ~ "JET",
stats.attr == "task_runtime" ~ "TET"
)
)
glimpse(dados_modelo_carga_labels)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
ylab("Group Goodeness-of-Fit (GGoF)")
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
ylab("Group Goodeness-of-Fit (GGoF)") +
labs(caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste.")
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
labs(caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste.")
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position='top') +
labs(caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste.")
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste.")
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
#  ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(
x = "K (clusters)",
y = "Group Goodeness-of-Fit (GGoF)",
caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste."
)
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
#  ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(
x = "k (clusters)",
y = "Group Goodeness-of-Fit (GGoF)",
caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste."
)
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
#  ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(
color = "Distribuição"
x = "k (clusters)",
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
#  ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(
color = "Distribuição",
x = "k (clusters)",
y = "Group Goodeness-of-Fit (GGoF)",
caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste."
)
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
#  ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(
color = "Distribuição de Probabilidade\n",
x = "k (clusters)",
y = "Group Goodeness-of-Fit (GGoF)",
caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste."
)
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
#  ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(
color = "Distribuição de Probabilidade",
x = "k (clusters)",
y = "Group Goodeness-of-Fit (GGoF)",
caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste."
)
ggsave("figura2.png", width=8, height = 5, dpi=600)
dados_modelo_carga_labels %>%
ggplot(mapping = aes(y = ratio, x = k, color = distribution )) +
facet_grid(atributos_carga ~ Trace_label) +
geom_line() +
#  ylab("Group Goodeness-of-Fit (GGoF)") +
theme(plot.title=element_text(hjust=0.5), text=element_text(size=12)) +
theme_update(legend.position = "top") +
labs(
color = "Distribuição de Probabilidade",
x = "k (número de clusters)",
y = "Group Goodeness-of-Fit (GGoF)",
caption = "Figura 2: Resultados do GGoF para diferentes cenários de ajuste."
)
ggsave("figura2.png", width=8, height = 5, dpi=600)
